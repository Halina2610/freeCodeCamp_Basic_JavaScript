 // challenge 100
/*Итерация с JavaScript для циклов
Вы можете запускать один и тот же код несколько раз, используя цикл.
Наиболее распространенный тип цикла JavaScript называется циклом, forпотому что он выполняется определенное количество раз.
Циклы for объявляются с тремя необязательными выражениями, разделенными точкой с запятой:
for (a; b; c), где aоператор инициализации, bоператор условия и cконечное выражение.
Оператор инициализации выполняется только один раз перед запуском цикла. 
Обычно он используется для определения и настройки вашей переменной цикла.
Оператор условия оценивается в начале каждой итерации цикла и будет продолжаться до тех пор, 
пока он оценивается как true. Когда условие находится falseв начале итерации, выполнение цикла прекращается. 
Это означает, что если условие начинается как ложное, ваш цикл никогда не будет выполняться.
Окончательное выражение выполняется в конце каждой итерации цикла перед следующей проверкой условия и обычно 
используется для увеличения или уменьшения счетчика цикла.
В следующем примере мы инициализируем i = 0и повторяем, пока наше условие i < 5истинно. Мы будем увеличивать
iна 1в каждой итерации цикла с i++нашим окончательным выражением.

const ourArray = [];

for (let i = 0; i < 5; i++) {
  ourArray.push(i);
}
ourArrayтеперь будет иметь значение [0, 1, 2, 3, 4].

Используйте forцикл, чтобы поместить значения от 1 до 5 в myArray.*/

// challenge 101
/*Перебор нечетных чисел с помощью цикла for
Циклы for не должны повторяться по одному. Изменив наш final-expression, мы можем считать четными числами.
Мы начнем с i = 0и зациклим, пока i < 10. Мы будем увеличивать iна 2 каждый цикл с помощью i += 2.
const ourArray = [];
for (let i = 0; i < 10; i += 2) {
  ourArray.push(i);
}
ourArrayтеперь будет содержать [0, 2, 4, 6, 8]. Давайте изменим наш initialization, чтобы мы могли считать нечетными числами.
Вставьте нечетные числа от 1 до 9 в myArrayцикл for.*/
// Setup
const myArray = [];

// Only change code below this line
for (var i = 1; i < 10; i += 2) {
  myArray.push(i);
}
console.log(myArray)

// challenge 102
/*Считаем в обратном порядке с помощью цикла for
Цикл for также может считать в обратном порядке, если мы можем определить правильные условия.

Чтобы уменьшить на два на каждой итерации, нам нужно изменить нашу инициализацию, условие и конечное выражение.

Мы начнем с i = 10и зациклим, пока i > 0. Мы будем уменьшать iна 2 каждый цикл с помощью i -= 2.

const ourArray = [];

for (let i = 10; i > 0; i -= 2) {
  ourArray.push(i);
}
ourArrayтеперь будет содержать [10, 8, 6, 4, 2]. Давайте изменим нашу инициализацию и окончательное выражение, 
чтобы мы могли считать в обратном порядке двойками, чтобы создать массив убывающих нечетных чисел.

Вставьте нечетные числа от 9 до 1 в myArrayцикл for.*/
// Setup
const myArray = [];

// Only change code below this line
for (var i = 9; i > 0; i -= 2) {
  myArray.push(i);
}

// challenge 103
/*Перебор массива с помощью цикла for
Распространенной задачей в JavaScript является перебор содержимого массива. 
Один из способов сделать это — использовать forцикл. Этот код выведет каждый элемент массива arrна консоль:

const arr = [10, 9, 8, 7, 6];

for (let i = 0; i < arr.length; i++) {
   console.log(arr[i]);
}
Помните, что индексация массивов начинается с нуля, что означает, что последний индекс массива равен length - 1. 
Наше условие для этого цикла i < arr.length, которое останавливает цикл, когда iравно length. В этом случае последняя итерация, 
т.е. i === 4когда iстановится равно arr.length - 1и выводится 6на консоль. Затем iувеличивается до 5, и цикл завершается, потому i < arr.lengthчто false.

Объявите и инициализируйте переменную totalв 0. Используйте forцикл, чтобы добавить значение каждого элемента массива myArrв total.*?
// Setup
const myArr = [2, 3, 4, 5, 6];

// Only change code below this line

var total = 0;
for (let i = 0; i < myArr.length; i++) {
  total += myArr[i];
}
console.log(total);

// challenge 104

// challenge 105
